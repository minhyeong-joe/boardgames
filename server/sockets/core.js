const {
	joinLobby,
	createRoom,
	requestJoinRoom,
	joinRoom,
	sendMessage,
	userExit,
} = require("./room");

// userRooms is used to map user's socket id to the room id
// This makes room search from socket id efficient and fast
const userRooms = {};

// rooms are all game rooms not including the lobby that displays rooms for specific games
// rooms contain:
// id: uuid
// name: String room name
// memebers: [ { userId: ID generated by MongoDB, username: name of user, isOwner: Boolean, socketId: ID generated by socketIO } ]
// gameState: initially null, but receive corresponding gameState from client component (gameState has many forms based on game type)
// gameId: uuid
// password: String or null
// maxOccupancy: number of max occupancy
// isPrivate: automatically set to true if password is provided, else false
const rooms = [];

exports = module.exports = (io) => {
	io.on("connection", (socket) => {
		console.log(`socket connected: ${socket.id}`);

		// on user joinning the lobby (page that displays all the rooms for a game)
		socket.on("joinLobby", joinLobby(socket, rooms, userRooms));

		// on user create a room via create_room_modal
		socket.on("createRoom", createRoom(rooms));

		socket.on("requestJoinRoom", requestJoinRoom(rooms));

		// on user joining the game room
		// Note: after user creates a room, he/she will be redirected to the room and thus "joinRoom" and be added as the first member AKA owner.
		socket.on("joinRoom", joinRoom(socket, rooms, userRooms));

		// on user send message
		socket.on("sendMessage", sendMessage(io, socket, userRooms));

		socket.on("disconnect", () => {
			console.log(`socket disconnected: ${socket.id}`);

			userExit(socket, rooms, userRooms);
		});
	});
};
